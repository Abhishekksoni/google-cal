generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  refresh_token_expires_in Int?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("buyer") // "seller" or "buyer"
  accounts      Account[]
  sessions      Session[]
  
  // For sellers
  refreshToken  String?   @db.Text
  calendarId    String?
  
  // Appointments
  appointmentsAsSeller Appointment[] @relation("SellerAppointments")
  appointmentsAsBuyer  Appointment[] @relation("BuyerAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  sellerId    String
  buyerId     String
  googleEventId String?
  meetingLink String?
  status      String   @default("confirmed") // "confirmed", "cancelled"
  
  seller      User     @relation("SellerAppointments", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer       User     @relation("BuyerAppointments", fields: [buyerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}